version: "3.4"

networks:
  local:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/24
  traefik:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.1.0/24

volumes:
  mongo_data:
  postgres_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

x-labels: &labels
  orchestrator: "docker-compose"
  github.repo: "moorara/microservices-demo"

x-logdriver: &logdriver
  logging:
    driver: fluentd
    options:
      fluentd-address: 172.20.0.250:24224
      tag: docker.{{.Name}}.{{.ImageName}}
      labels: orchestrator,github.repo
      env: SERVICE_NAME,SERVICE_TAGS

services:

  # DATA BACKENDS
  mongo:
    image: mongo:4.0.0
    hostname: mongo
    container_name: mongo
    restart: always
    ports:
      - "27017:27017"
    networks:
      - local
    volumes:
      - "mongo_data:/data/db"
  postgres:
    image: postgres:10.4
    hostname: postgres
    container_name: postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=pass
    networks:
      - local
    volumes:
      - "postgres_data:/var/lib/postgresql/data"
      - "./init/init-postgres.sql:/docker-entrypoint-initdb.d/init-postgres.sql"

  # LOGGING
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.3.1
    hostname: elasticsearch
    container_name: elasticsearch
    restart: always
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    networks:
      - local
    volumes:
      - "elasticsearch_data:/usr/share/elasticsearch/data"
      - "./logging/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml"
  kibana:
    image: moorara/kibana:6.3.1
    hostname: kibana
    container_name: kibana
    restart: always
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    networks:
      - local
    volumes:
      - "./logging/kibana.yml:/usr/share/kibana/config/kibana.yml"
      - "./logging/logtrail.json:/usr/share/kibana/plugins/logtrail/logtrail.json"
  fluentd:
    image: moorara/fluentd:v1.2.2
    hostname: fluentd
    container_name: fluentd
    restart: always
    depends_on:
      - elasticsearch
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    environment:
      - FLUENTD_CONF=fluentd.conf
    networks:
      local:
        ipv4_address: 172.20.0.250
    volumes:
      - "./logging/fluentd.conf:/fluentd/etc/fluentd.conf"

  # METRICS
  prometheus:
    image: prom/prometheus:v2.3.1
    hostname: prometheus
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    networks:
      - local
      - traefik
    volumes:
      - "prometheus_data:/prometheus"
      - "./metrics/prometheus.yml:/prometheus.yml"
      - "./metrics/alerts.yml:/alerts.yml"
    command: "--config.file=/prometheus.yml"
  grafana:
    image: grafana/grafana:5.2.1
    hostname: grafana
    container_name: grafana
    restart: always
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    environment:
      # http://docs.grafana.org/installation/configuration
      - GF_SECURITY_ADMIN_PASSWORD=pass
    networks:
      - local
    volumes:
      - "grafana_data:/var/lib/grafana"
  alertmanager:
    image: prom/alertmanager:v0.15.0
    hostname: alertmanager
    container_name: alertmanager
    restart: always
    ports:
      - "9093:9093"
    networks:
      - local
    volumes:
      - "./metrics/alertmanager.yml:/alertmanager.yml"
    command: "--config.file=/alertmanager.yml"

  # METRICS EXPORTERS
  node-exporter:
    image: prom/node-exporter:v0.16.0
    hostname: node-exporter
    container_name: node-exporter
    ports:
      - "9100:9100"
    networks:
      - local
  cadvisor:
    image: google/cadvisor:v0.28.3
    hostname: cadvisor
    container_name: cadvisor
    ports:
      - "9080:8080"
    networks:
      - local
    volumes:
      - "/:/rootfs:ro"
      - "/var/run:/var/run:rw"
      - "/sys:/sys:ro"
      - "/var/lib/docker/:/var/lib/docker:ro"
      - "/dev/disk/:/dev/disk:ro"

  # GATEWAYS
  traefik:
    image: traefik:1.6.5
    hostname: traefik
    container_name: traefik
    restart: always
    ports:
      - "1080:80"
      - "1443:443"
      - "2080:8080"
    networks:
      - traefik
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./certs:/etc/ssl/certs:ro"
      - "./gateway/traefik.toml:/etc/traefik/traefik.toml"
    labels:
      <<: *labels
    <<: *logdriver

  # APPLICATION SERVICES
  react-client:
    image: moorara/react-client:latest
    hostname: react-client
    container_name: react-client
    depends_on:
      - fluentd
    ports:
      - "4000:4000"
    environment:
      - LOG_LEVEL=debug
      - SERVICE_NAME=react-client
      - SERVICE_TAGS=monitor
    networks:
      - local
      - traefik
    labels:
      <<: *labels
      traefik.enable: "true"
      traefik.docker.network: "compose_traefik"
      traefik.port: "4000"
      traefik.backend: "react-client"
      traefik.frontend.rule: "Host:traefik,localhost;"
    <<: *logdriver
  site-service:
    image: moorara/site-service:latest
    hostname: site-service
    container_name: site-service
    depends_on:
      - mongo
      - fluentd
    ports:
      - "4010:4010"
    environment:
      - LOG_LEVEL=debug
      - SERVICE_NAME=site-service
      - SERVICE_TAGS=monitor
      - MONGO_URL=mongodb://mongo:27017
    networks:
      - local
      - traefik
    labels:
      <<: *labels
      traefik.enable: "true"
      traefik.docker.network: "compose_traefik"
      traefik.port: "4010"
      traefik.backend: "site-service"
      traefik.frontend.rule: "Host:traefik,localhost; PathPrefixStrip:/api/v1/sites; AddPrefix:/v1/sites"
    <<: *logdriver
  sensor-service:
    image: moorara/sensor-service:latest
    hostname: sensor-service
    container_name: sensor-service
    depends_on:
      - postgres
      - fluentd
    ports:
      - "4020:4020"
    environment:
      - SERVICE_NAME=sensor-service
      - SERVICE_TAGS=monitor
      - POSTGRES_URL=postgres://root:pass@postgres
    networks:
      - local
      - traefik
    labels:
      <<: *labels
      traefik.enable: "true"
      traefik.docker.network: "compose_traefik"
      traefik.port: "4020"
      traefik.backend: "sensor-service"
      traefik.frontend.rule: "Host:traefik,localhost; PathPrefix:/api/v1/sensors; ReplacePathRegex: ^/api/(.*) /$$1"
    <<: *logdriver
