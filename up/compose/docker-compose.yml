version: "3.4"

networks:
  local:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/24

volumes:
  redis_data: {}
  mongo_data: {}
  arango_data: {}
  postgres_data: {}
  cockroach_data: {}
  prometheus_data: {}
  grafana_data: {}
  elasticsearch_data: {}

x-labels: &labels
  orchestrator: "docker-compose"
  github.repo: "moorara/microservices-demo"
x-logdriver: &logdriver
  logging:
    driver: fluentd
    options:
      fluentd-address: 172.20.0.250:24224
      tag: docker.{{.Name}}.{{.ImageName}}
      labels: orchestrator,github.repo
      env: SERVICE_NAME,SERVICE_TAGS

services:

  # DATA BACKENDS
  redis:
    image: redis:5.0.2
    hostname: redis
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - local
    volumes:
      - "redis_data:/data"
  mongo:
    image: mongo:4.0.4
    hostname: mongo
    container_name: mongo
    restart: always
    ports:
      - "27017:27017"
    networks:
      - local
    volumes:
      - "mongo_data:/data/db"
  arango:
    image: arangodb/arangodb:3.4.0
    hostname: arango
    container_name: arango
    restart: always
    ports:
      - "8529:8529"
    environment:
      - ARANGO_ROOT_PASSWORD=pass
    networks:
      - local
    volumes:
      - "arango_data:/var/lib/arangodb3"
  postgres:
    image: postgres:11.1
    hostname: postgres
    container_name: postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=pass
    networks:
      - local
    volumes:
      - "postgres_data:/var/lib/postgresql/data"
      - "./data/postgres/init-postgres.sql:/docker-entrypoint-initdb.d/init-postgres.sql"
  cockroach:
    image: cockroachdb/cockroach:v2.1.1
    hostname: cockroach
    container_name: cockroach
    restart: always
    ports:
      - "26257:26257"
      - "28080:8080"
    networks:
      - local
    volumes:
      - "cockroach_data:/cockroach/cockroach-data"
    command: [ "start", "--insecure" ]
  cockroach-init:
    image: cockroachdb/cockroach:v2.1.1
    hostname: cockroach-init
    container_name: cockroach-init
    depends_on:
      - cockroach
    environment:
      - COCKROACH_HOST=cockroach
    networks:
      - local
    volumes:
      - "./data/cockroach/init-cockroach.sql:/init/init-cockroach.sql"
    command: [ "shell", "-c", "/cockroach/cockroach.sh sql --insecure < /init/init-cockroach.sql" ]

  # MESSAGING
  nats:
    image: nats:1.3.0
    hostname: nats
    container_name: nats
    restart: always
    ports:
      - "4222:4222"  # Clients
      - "6222:6222"  # Routing port for clustering
      - "8222:8222"  # HTTP management port for information reporting
    networks:
      - local
    command: [ "-m", "8222", "--user", "client", "--pass", "pass" ]
  nats-exporter:
    image: moorara/nats-exporter:v0.1.0
    hostname: nats-exporter
    container_name: nats-exporter
    restart: always
    ports:
      - "7777:7777"
    networks:
      - local
    command: [ "-connz", "-routez", "-subz", "-varz", "-port=7777", "http://nats:8222" ]

  # LOGGING
  elasticsearch:
    image: elasticsearch:6.5.1
    hostname: elasticsearch
    container_name: elasticsearch
    restart: always
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    networks:
      - local
    volumes:
      - "elasticsearch_data:/usr/share/elasticsearch/data"
      - "./logging/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml"
  kibana:
    image: kibana:6.5.1
    hostname: kibana
    container_name: kibana
    restart: always
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    networks:
      - local
    volumes:
      - "./logging/kibana.yml:/usr/share/kibana/config/kibana.yml"
      - "./logging/logtrail.json:/usr/share/kibana/plugins/logtrail/logtrail.json"
  fluentd:
    image: moorara/fluentd:v1.3.1
    hostname: fluentd
    container_name: fluentd
    restart: always
    depends_on:
      - elasticsearch
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    environment:
      - FLUENTD_CONF=fluentd.conf
    networks:
      local:
        ipv4_address: 172.20.0.250
    volumes:
      - "./logging/fluentd.conf:/fluentd/etc/fluentd.conf"

  # METRICS
  prometheus:
    image: prom/prometheus:v2.5.0
    hostname: prometheus
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
      - "9091:9091"
    networks:
      - local
    volumes:
      - "prometheus_data:/prometheus"
      - "./metrics/prometheus.yml:/prometheus.yml"
      - "./metrics/alerts.yml:/alerts.yml"
    command: "--config.file=/prometheus.yml"
  grafana:
    image: grafana/grafana:5.4.0
    hostname: grafana
    container_name: grafana
    restart: always
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    environment:
      # http://docs.grafana.org/installation/configuration
      - GF_SECURITY_ADMIN_PASSWORD=pass
    networks:
      - local
    volumes:
      - "grafana_data:/var/lib/grafana"
  alertmanager:
    image: prom/alertmanager:v0.15.3
    hostname: alertmanager
    container_name: alertmanager
    restart: always
    ports:
      - "9093:9093"
    networks:
      - local
    volumes:
      - "./metrics/alertmanager.yml:/alertmanager.yml"
    command: "--config.file=/alertmanager.yml"

  # METRICS EXPORTERS
  node-exporter:
    image: prom/node-exporter:v0.17.0
    hostname: node-exporter
    container_name: node-exporter
    ports:
      - "9100:9100"
    networks:
      - local
  cadvisor:
    image: google/cadvisor:v0.28.3
    hostname: cadvisor
    container_name: cadvisor
    ports:
      - "9800:8080"
    networks:
      - local
    volumes:
      - "/:/rootfs:ro"
      - "/var/run:/var/run:rw"
      - "/sys:/sys:ro"
      - "/var/lib/docker/:/var/lib/docker:ro"
      - "/dev/disk/:/dev/disk:ro"

  # TRACING
  jaeger:
    image: jaegertracing/all-in-one:1.8.2
    hostname: jaeger
    container_name: jaeger
    restart: always
    ports:
      - "5775:5775/udp"    # agent:      accept zipkin.thrift over compact thrift protocol
      - "6831:6831/udp"    # agent:      accept jaeger.thrift over compact thrift protocol
      - "6832:6832/udp"    # agent:      accept jaeger.thrift over binary thrift protocol
      - "5778:5778"        # agent:      serve configs
      - "16686:16686"      # query:      serve frontend
      - "14268:14268"      # collector:  accept jaeger.thrift directly from clients
      - "9411:9411"        # collector:  Zipkin compatible endpoint
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
    networks:
      - local

  # GATEWAYS
  traefik:
    image: traefik:1.7.5
    hostname: traefik
    container_name: traefik
    restart: always
    depends_on:
      - fluentd
    ports:
      - "1080:80"
      - "1443:443"
      - "1900:8080"
    networks:
      - local
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./certs:/etc/ssl/certs:ro"
      - "./gateway/traefik.toml:/etc/traefik/traefik.toml"
    labels:
      <<: *labels
    <<: *logdriver
  caddy:
    image: moorara/caddy:v0.11.1
    hostname: caddy
    container_name: caddy
    restart: always
    depends_on:
      - fluentd
    ports:
      - "80:80"
      - "443:443"
      - "9900:9900"
    networks:
      - local
    volumes:
      - "./certs:/etc/ssl/certs:ro"
      - "./gateway/Caddyfile:/www/Caddyfile"
    command: [ "-conf", "/www/Caddyfile" ]
    labels:
      <<: *labels
    <<: *logdriver

  # APPLICATION SERVICES
  react-client:
    image: moorara/react-client:latest
    hostname: react-client
    container_name: react-client
    restart: always
    depends_on:
      - fluentd
    ports:
      - "4000:4000"
    environment:
      - LOG_LEVEL=debug
      - SERVICE_NAME=react-client
      - SERVICE_TAGS=monitor
    networks:
      - local
    labels:
      <<: *labels
    <<: *logdriver
  site-service:
    image: moorara/site-service:latest
    hostname: site-service
    container_name: site-service
    restart: always
    depends_on:
      - mongo
      - fluentd
      - jaeger
    ports:
      - "4010:4010"
    environment:
      - LOG_LEVEL=debug
      - SERVICE_NAME=site-service
      - SERVICE_TAGS=monitor
      - MONGO_URI=mongodb://mongo:27017
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6832
    networks:
      - local
    labels:
      <<: *labels
      traefik.enable: "true"
      traefik.docker.network: "compose_traefik"
      traefik.port: "4010"
      traefik.backend: "site-service"
      traefik.frontend.rule: "Host:traefik,localhost; PathPrefixStrip:/api/v1/sites; AddPrefix:/v1/sites"
    <<: *logdriver
  sensor-service:
    image: moorara/sensor-service:latest
    hostname: sensor-service
    container_name: sensor-service
    restart: always
    depends_on:
      - postgres
      - fluentd
      - jaeger
    ports:
      - "4020:4020"
    environment:
      - LOG_LEVEL=debug
      - SERVICE_NAME=sensor-service
      - SERVICE_TAGS=monitor
      - POSTGRES_HOST=postgres
      - POSTGRES_USERNAME=root
      - POSTGRES_PASSWORD=pass
      - JAEGER_AGENT_ADDR=jaeger:6831
    networks:
      - local
    labels:
      <<: *labels
      traefik.enable: "true"
      traefik.docker.network: "compose_traefik"
      traefik.port: "4020"
      traefik.backend: "sensor-service"
      traefik.frontend.rule: "Host:traefik,localhost; PathPrefix:/api/v1/sensors; ReplacePathRegex: ^/api/(.*) /$$1"
    <<: *logdriver
  switch-service:
    image: moorara/switch-service:latest
    hostname: switch-service
    container_name: switch-service
    restart: always
    depends_on:
      - arango
      - fluentd
      - jaeger
    ports:
      - "4030:4030"
      - "4031:4031"
    environment:
      - LOG_LEVEL=debug
      - SERVICE_NAME=switch-service
      - SERVICE_TAGS=monitor
      - ARANGO_ENDPOINTS=tcp://arango:8529
      - ARANGO_PASSWORD=pass
      - JAEGER_AGENT_ADDR=jaeger:6831
    networks:
      - local
    labels:
      <<: *labels
    <<: *logdriver
  asset-service:
    image: moorara/asset-service:latest
    hostname: asset-service
    container_name: asset-service
    restart: always
    depends_on:
      - nats
      - cockroach
      - cockroach-init
      - fluentd
      - jaeger
    ports:
      - "4040:4040"
    environment:
      - LOG_LEVEL=debug
      - SERVICE_NAME=asset-service
      - SERVICE_TAGS=monitor
      - NATS_SERVERS=nats://nats:4222
      - NATS_USER=client
      - NATS_PASSWORD=pass
      - COCKROACH_ADDR=cockroach:26257
      - COCKROACH_USER=cockroach
      - JAEGER_AGENT_ADDR=jaeger:6831
    networks:
      - local
    labels:
      <<: *labels
    <<: *logdriver
  graphql-server:
    image: moorara/graphql-server:latest
    hostname: graphql-server
    container_name: graphql-server
    restart: always
    depends_on:
      - fluentd
      - jaeger
    ports:
      - "5000:5000"
    environment:
      - LOG_LEVEL=debug
      - SERVICE_NAME=graphql-server
      - SERVICE_TAGS=monitor
      - GRAPHIQL_ENABLED=true
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6832
      - NATS_SERVERS=nats://nats:4222
      - NATS_USER=client
      - NATS_PASSWORD=pass
      - SITE_SERVICE_ADDR=site-service:4010
      - SENSOR_SERVICE_ADDR=sensor-service:4020
      - SWITCH_SERVICE_ADDR=switch-service:4030
    networks:
      - local
    labels:
      <<: *labels
    <<: *logdriver
